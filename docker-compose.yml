version: "3"

services:

  proxy:
    image: traefik:v2.6.1
    container_name: "ckan-traefik"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik:/configuration"
    depends_on:
      - ckan
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      - --providers.file.directory=/configuration/
      - --providers.file.watch=true
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      # - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Allow insecure API
      - --api.insecure=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.email=${ACME_CONTACT?Variable not set}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      # used during the challenge
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.httpchallenge=${ISSUE_HTTPS?Variable not set}
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
  ckan:
    container_name: ckan
    build:
      context: ckan/
      dockerfile: Dockerfile
      args:
        - TZ=${TZ}
    env_file:
      - .env
    links:
      - db
      - solr
      - redis
      - datapusher
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    expose:
      - 8080
    volumes:
      - ckan_storage:/var/lib/ckan
      - ./logs/nginx:/var/log/nginx
    labels:
      - traefik.enable=true
      - traefik.http.services.ckan.loadbalancer.server.port=8080
      - traefik.http.services.ckan.loadBalancer.passHostHeader=true
      - traefik.http.routers.ckan-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.ckan-http.entrypoints=web
      - traefik.http.routers.ckan-https.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.ckan-https.tls.certresolver=myresolver
      - traefik.http.routers.ckan-https.entrypoints=websecure
      # Handle domain with and without "www" to redirect to only one
      # To disable www redirection remove the next line
      - traefik.http.middlewares.ckan-www-redirect-http.redirectregex.regex=^http?://(www.)?(${DOMAIN?Variable not set})/(.*)
      - traefik.http.middlewares.ckan-www-redirect-https.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
      # Redirect a domain with www to non-www
      # To disable it remove the next line
      - traefik.http.middlewares.ckan-www-redirect-http.redirectregex.replacement=http://${DOMAIN?Variable not set}/$${3}
      - traefik.http.middlewares.ckan-www-redirect-https.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
      # to disable www redirection remove the section: www-redirect,
      - traefik.http.middlewares.ckan-security-headers.headers.accesscontrolallowmethods=GET, OPTIONS, PUT, POST
      - traefik.http.middlewares.ckan-security-headers.headers.accessControlAllowCredentials=true
      - traefik.http.middlewares.ckan-security-headers.headers.accesscontrolmaxage=100
      - traefik.http.middlewares.ckan-security-headers.headers.addvaryheader=true
      - traefik.http.middlewares.ckan-security-headers.headers.hostsproxyheaders=X-Forwarded-Host
      - traefik.http.middlewares.ckan-security-headers.headers.sslredirect=true
      - traefik.http.middlewares.ckan-security-headers.headers.sslproxyheaders.X-Forwarded-Proto=https
      - traefik.http.middlewares.ckan-security-headers.headers.stsseconds=63072000
      - traefik.http.middlewares.ckan-security-headers.headers.stsincludesubdomains=true
      - traefik.http.middlewares.ckan-security-headers.headers.stspreload=true
      - traefik.http.middlewares.ckan-security-headers.headers.forcestsheader=true
      - traefik.http.middlewares.ckan-security-headers.headers.framedeny=true
      - traefik.http.middlewares.ckan-security-headers.headers.contenttypenosniff=true
      - traefik.http.middlewares.ckan-security-headers.headers.browserxssfilter=true
      - traefik.http.middlewares.ckan-security-headers.headers.referrerpolicy=same-origin
      - traefik.http.middlewares.ckan-security-headers.headers.featurepolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';
      - traefik.http.middlewares.ckan-security-headers.headers.customresponseheaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex,
      #- traefik.http.middlewares.ckan-csp.headers.contentsecuritypolicy=default-src 'none'; img-src 'self' https://${DOMAIN?Variable not set}; script-src 'self'; style-src 'self'
      - traefik.http.routers.ckan-https.middlewares=ckan-security-headers, ckan-www-redirect-https, ckan-www-redirect-http
      - traefik.http.routers.ckan-https.tls.options=mintls12@file
  datapusher:
    container_name: datapusher
    networks:
      - default
    build:
      context: datapusher/
    ports:
      - "8800:8800"

  db:
    container_name: db
    networks:
      - default
    build:
      context: postgresql/
      args:
        - DATASTORE_READONLY_PASSWORD=${DATASTORE_READONLY_PASSWORD}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    environment:
      - DATASTORE_READONLY_PASSWORD=${DATASTORE_READONLY_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/db
    volumes:
      - pg_data:/var/lib/postgresql/data

  solr:
    networks:
      - default
    container_name: solr
    build:
      context: solr/
    volumes:
      - solr_data:/opt/solr/server/solr/ckan/data/index

  redis:
    networks:
      - default
    container_name: redis
    image: redis:alpine

volumes:
  ckan_storage:
  pg_data:
  solr_data:

networks:
  traefik-public:
